Description: Create VPC 

Parameters:
  VPCName:
    Description: Name of VPC
    Type: String
    Default: "VPC"
  
  Region:
    Description: Region on which VPC is deployed
    Type: String
    Default: ap-southeast-2
  
  ProjectName:
    Description: Name of the project
    Type: String
    Default: ""

Mappings:
  RegionMap:
    ap-southeast-2:
      CidrBlock: 10.0.0.0/16
      PrivateSubnet1CidrBlock: 10.0.1.0/24
      PrivateSubnet2CidrBlock: 10.0.2.0/24
      PrivateSubnet3CidrBlock: 10.0.3.0/24
      PublicSubnet1CidrBlock:  10.0.4.0/24
      PublicSubnet2CidrBlock:  10.0.5.0/24
      PublicSubnet3CidrBlock:  10.0.6.0/24


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ RegionMap, !Ref Region, CidrBlock ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: Name
          Value: !Sub "${ProjectName}IGW"
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ RegionMap, !Ref Region, PublicSubnet1CidrBlock ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}PublicSubnet1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [ RegionMap, !Ref Region, PublicSubnet2CidrBlock ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}PublicSubnet2"

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !FindInMap [ RegionMap, !Ref Region, PublicSubnet3CidrBlock ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}PublicSubnet3"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ RegionMap, !Ref Region, PrivateSubnet1CidrBlock ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}PrivateSubnet1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [ RegionMap, !Ref Region, PrivateSubnet2CidrBlock ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}PrivateSubnet2"

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !FindInMap [ RegionMap, !Ref Region, PrivateSubnet3CidrBlock ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}PrivateSubnet3"

  # Create Elastic IP to attach to NatGateway
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc 
  
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway3EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc      

  # Creatign NatGateway with associated EIP and PublicSubnet
  NatGateway1:
    Type: AWS::EC2::NatGateway 
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1      
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}NAT1"

  NatGateway2:
    Type: AWS::EC2::NatGateway 
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2 
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}NAT1"

  NatGateway3:
    Type: AWS::EC2::NatGateway 
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3  
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}NAT1"

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable 
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: !Sub "${ProjectName}PublicRouteTable"

  #Default route to IGW
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associating Routetable to Public Subnets : One RouteTable for all public subnets
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  #Private Route table 1
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}PrivateRouteTable1"

  #Redirect traffic to NAT in private subnet
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  # Associate routetable to private subnet  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  #Private Route table 2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}PrivateRouteTable2"

  #Redirect traffic to NAT in private subnet
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  # Associate routetable to private subnet  
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  #Private Route table 3
  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}PrivateRouteTable3"

  #Redirect traffic to NAT in private subnet
  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  # Associate routetable to private subnet  
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub "${VPCName}" 
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${ProjectName}PrivateSubnet1"
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${ProjectName}PrivateSubnet2"
  PrivateSubnet3:
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub "${ProjectName}PrivateSubnet3"
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${ProjectName}PublicSubnet1"
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${ProjectName}PublicSubnet2"
  PublicSubnet3:
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub "${ProjectName}PublicSubnet3"