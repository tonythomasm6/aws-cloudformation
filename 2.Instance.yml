Description: Deploy EC2 instance in ASG 

Parameters:
  MinInstance:
    Type: Number
    Default: 1
    Description: ASG Minimum instance

  MaxInstance:
    Type: Number
    Default: 1
    Description: ASG Maximum instance

  InstanceType:
    Type: String
    Default: t2.nano
    Description: EC2 Instance type to be used for deployment
  
  CertificateArn:
    Type: String
    Description: ARN of the SSL certificate in ACM
    Default: arn:aws:acm:us-east-1:225593105905:certificate/fe8d8325-f0e0-4fcb-96a0-17cd1b42e519

Resources:

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: InstanceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: 
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole 
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"
  
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: InstanceProfile
      Roles:
        - !Ref InstanceRole 

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupDescription: Security group for EC2 instances
      GroupName: InstanceSecurityGroup
      VpcId: !ImportValue VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup


  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt
            - InstanceProfile
            - Arn
        ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        EbsOptimized: "true"
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: LaunchTemplate
        #ToDo : RDS endpoint        
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              yum update -y
              yum install -y httpd jq
              systemctl start httpd
              systemctl enable httpd
              echo "Success" > /var/www/html/health.html

              # # Install MySQL client
              # sudo yum install -y mariadb

              # # Get database credentials from Secrets Manager
              # SECRET_ARN=arn:aws:secretsmanager:us-east-1:225593105905:secret:my-db-secret-DZbb2X
              # #Region to be updated with env variable
              # CREDENTIALS=$(aws secretsmanager get-secret-value --secret-id $SECRET_ARN --region us-east-1 --query SecretString --output text)
              # DB_USER=$(echo $CREDENTIALS | jq -r '.username')
              # DB_PASS=$(echo $CREDENTIALS | jq -r '.password')
              # RDS_ENDPOINT="rds.tonythomasm.com"  
              # RDS_PORT=3306
              # DB_NAME="myappdb"
              # echo "<br>Database Username: $DB_USER" >> /var/www/html/health.html
              # echo "<br>Database Password: $DB_PASS" >> /var/www/html/health.html
              # # Test connection
              # mysql -h "$RDS_ENDPOINT" -P "$RDS_PORT" -u "$DB_USER" -p"$DB_PASS" -e "USE $DB_NAME;" > /tmp/mysql_test.log 2>&1

              # if [ $? -eq 0 ]; then
              #   echo "MySQL connection SUCCESSFUL" | tee /var/log/user-data.log
              #   echo "<br>MySQL Connection: SUCCESSFUL" >> /var/www/html/health.html
              # else
              #   echo "MySQL connection FAILED" | tee /var/log/user-data.log
              #   echo "<br>MySQL Connection: FAILED" >> /var/www/html/health.html
              #   cat /tmp/mysql_test.log >> /var/log/user-data.log
              # fi

        

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TargetGroup
      Protocol: HTTP 
      HealthCheckPath: "/health.html"
      Port: 80
      VpcId: !ImportValue VPC
      #Optional
      HealthCheckIntervalSeconds: 60

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:  #ToDo : Learn detail
        WillReplace: true
    Properties:
      # AutoScalingGroupName: !Sub "${ProjectName}ASG"
      VPCZoneIdentifier:
        - !ImportValue PrivateSubnet1
        - !ImportValue PrivateSubnet2
        - !ImportValue PrivateSubnet3
      TargetGroupARNs: [!Ref TargetGroup]
      MinSize: !Ref MinInstance
      MaxSize: !Ref MaxInstance
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: Instance
          PropagateAtLaunch: true
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupDescription: Security group for ALB instances
      GroupName: ALBSecurityGroup
      VpcId: !ImportValue VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALB
      Subnets:
        - !ImportValue PublicSubnet1
        - !ImportValue PublicSubnet2
        - !ImportValue PublicSubnet3
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '360'
      SecurityGroups: [!Ref ALBSecurityGroup]
      Type: application
      IpAddressType: ipv4

  ALBDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z05736022TWK3R2C91ZQB
      Name: alb.tonythomasm.com
      Type: CNAME
      TTL: 60
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

  # HTTP Listener (Redirects to HTTPS)
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener 
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # HTTPS Listener
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener 
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01


Outputs:

  InstanceSecurityGroup:
    Description: InstanceSecurityGroup
    Value: !GetAtt InstanceSecurityGroup.GroupId
    Export:
      Name: InstanceSecurityGroup
